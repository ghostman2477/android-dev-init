package com.example.myapplication;

import android.content.Context;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.ImageView;
import android.widget.TextView;
import android.widget.Toast;

import androidx.annotation.*;
import androidx.recyclerview.widget.RecyclerView;

import com.bumptech.glide.Glide; // Make sure you have Glide dependency in build.gradle
import com.example.myapplication.R; // R file is generated by Android automatically
import com.example.myapplication.CartItem; // Import your CartItem model

import java.util.List;

public class CheckoutProductAdapter extends RecyclerView.Adapter<CheckoutProductAdapter.CheckoutProductViewHolder> {

    private List<CartItem> cartItemList;
    private Context context;

    public CheckoutProductAdapter(Context context, List<CartItem> cartItemList) {
        this.context = context;
        this.cartItemList = cartItemList;
    }

    @NonNull
    @Override
    public CheckoutProductViewHolder onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {
        View view = LayoutInflater.from(parent.getContext()).inflate(R.layout.item_checkout_product, parent, false);
        return new CheckoutProductViewHolder(view);
    }

    @Override
    public void onBindViewHolder(@NonNull CheckoutProductViewHolder holder, int position) {
        CartItem cartItem = cartItemList.get(position);

        // Load image using Glide
        // Make sure to add 'implementation 'com.github.bumptech.glide:glide:4.16.0'' to your build.gradle (Module: app)
        // and add <uses-permission android:name="android.permission.INTERNET" /> to AndroidManifest.xml
        Glide.with(context)
                .load(cartItem.getImageUrl())
                .placeholder(R.drawable.img_placeholder) // Use a placeholder drawable you have
                .error(R.drawable.img_placeholder) // Use an error drawable
                .into(holder.checkoutProductImageView);

        holder.checkoutProductNameTextView.setText(cartItem.getName());
        holder.checkoutPackInfoTextView.setText(cartItem.getPackInfo());
        // Display price (assuming price is per unit, calculate total for display)
        holder.checkoutPriceTextView.setText(String.format("₹%.0f", cartItem.getPrice() * cartItem.getQuantity()));
        holder.checkoutQuantityTextView.setText(String.valueOf(cartItem.getQuantity()));

        // Handle quantity buttons
        holder.checkoutPlusButton.setOnClickListener(v -> {
            cartItem.setQuantity(cartItem.getQuantity() + 1);
            holder.checkoutQuantityTextView.setText(String.valueOf(cartItem.getQuantity()));
            holder.checkoutPriceTextView.setText(String.format("₹%.0f", cartItem.getPrice() * cartItem.getQuantity())); // Update displayed price
            // TODO: In a real app, you would also notify the main activity/cart manager to update the total cart price
            Toast.makeText(context, cartItem.getName() + " quantity: " + cartItem.getQuantity(), Toast.LENGTH_SHORT).show();
        });

        holder.checkoutMinusButton.setOnClickListener(v -> {
            if (cartItem.getQuantity() > 0) { // Allow quantity to go to 0 if needed for removal
                cartItem.setQuantity(cartItem.getQuantity() - 1);
                holder.checkoutQuantityTextView.setText(String.valueOf(cartItem.getQuantity()));
                holder.checkoutPriceTextView.setText(String.format("₹%.0f", cartItem.getPrice() * cartItem.getQuantity())); // Update displayed price
                // TODO: In a real app, you would also notify the main activity/cart manager to update the total cart price
                // If quantity becomes 0, you might want to remove the item from the list visually
                if (cartItem.getQuantity() == 0) {
                    // This adapter doesn't know about the list in the activity directly.
                    // You'd need a callback interface or pass the list reference and notifyDataSetChanged()
                    Toast.makeText(context, cartItem.getName() + " removed from cart.", Toast.LENGTH_SHORT).show();
                } else {
                    Toast.makeText(context, cartItem.getName() + " quantity: " + cartItem.getQuantity(), Toast.LENGTH_SHORT).show();
                }
            }
        });

        // Handle "Save for later" click
        holder.saveForLaterTextView.setOnClickListener(v -> {
            cartItem.setSaveForLater(!cartItem.isSaveForLater()); // Toggle state
            if (cartItem.isSaveForLater()) {
                Toast.makeText(context, cartItem.getName() + " moved to Save for later", Toast.LENGTH_SHORT).show();
                // TODO: Implement actual move logic, e.g., move to another list or update backend
            } else {
                Toast.makeText(context, cartItem.getName() + " removed from Save for later", Toast.LENGTH_SHORT).show();
            }
        });
    }

    @Override
    public int getItemCount() {
        return cartItemList.size();
    }

    // ViewHolder class - Holds references to the views in item_checkout_product.xml
    public static class CheckoutProductViewHolder extends RecyclerView.ViewHolder {
        ImageView checkoutProductImageView;
        TextView checkoutProductNameTextView;
        TextView checkoutPackInfoTextView;
        TextView checkoutPriceTextView;
        TextView checkoutQuantityTextView;
        Button checkoutMinusButton;
        Button checkoutPlusButton;
        TextView saveForLaterTextView;

        public CheckoutProductViewHolder(@NonNull View itemView) {
            super(itemView);
            checkoutProductImageView = itemView.findViewById(R.id.checkoutProductImageView);
            checkoutProductNameTextView = itemView.findViewById(R.id.checkoutProductNameTextView);
            checkoutPackInfoTextView = itemView.findViewById(R.id.checkoutPackInfoTextView);
            checkoutPriceTextView = itemView.findViewById(R.id.checkoutPriceTextView);
            checkoutQuantityTextView = itemView.findViewById(R.id.checkoutQuantityTextView);
            checkoutMinusButton = itemView.findViewById(R.id.checkoutMinusButton);
            checkoutPlusButton = itemView.findViewById(R.id.checkoutPlusButton);
            saveForLaterTextView = itemView.findViewById(R.id.saveForLaterTextView);
        }
    }
}